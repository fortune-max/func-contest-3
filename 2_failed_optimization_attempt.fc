{-
  Contract handles internal messages with queries with the following scheme
  `_# score:uint32 value:(VarUInteger 16) msg:^Cell = MsgInternalBody`, where msg contains correct internal message and store it to contract.
  Once the number of stored queries reaches 12, contract should send and delete from storage message with the highest score and message with 
  the lowest value (if it is the same message, it should be sent once). Messages should be sent with mode 0 and coin amount should be equal to 
  value. All scores and values are guaranteed to be different
  Note, that in addition to gas-fees, storage fees will be used to determine final score. In particular, storage fee will be calculated like 
  between each message passes 3 days (259200 seconds). Gas-units price and storage fee params will correspond to current configs of 
  masterchain: 1000 nanoTON per 65536 bits per second + 500000 nanoTON per 65536 cells per second; gas is 10000 nanoTON per unit.


  Example:
  (message with score x and value y are represented as `(x,y)` )

  incoming message   outcoming messages     
  (1, 5)           | -
  (2, 6)           | -
  (3, 100)         | -
  (4, 2)           | -
  (5, 3)           | -
  (6, 4)           | -
  (7, 7)           | -
  (8, 8)           | -
  (9, 9)           | -
  (10, 10)         | -
  (11, 11)         | -
  (12, 20)         | (12,20); (4,2)
  (15, 1)          | -
  (13, 13)         | (15, 1)
  (14, 14)         | (14,14); (5,3)
-}

(cell, cell) get_body_3(cell msgs, int msg_idx) {
  (slice returned, _) = msgs~udict_delete_get?(16, msg_idx);
  return (msgs, returned~load_ref());
}

cell set_body_3(cell new_msg, int msg_idx, cell msgs) {
  msgs~udict_set_ref(16, msg_idx, new_msg);
  return msgs;
}

() send_cell (cell to_send, int value) impure {
  ;;~dump([911, value]);
  cell address = begin_cell().store_uint(4, 3)
    .store_uint(0, 8)
    .store_uint(0, 256).end_cell();

  cell response_msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(address.begin_parse())
    .store_grams(value)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 0)
    .store_uint(1, 1)
    .store_ref(to_send)
    .end_cell();

  send_raw_message(response_msg, 0);
}

;; testable
() recv_internal (slice in_msg_body) {
  (int score, int value, cell msg) = (in_msg_body~load_uint(32), in_msg_body~load_grams(), in_msg_body~load_ref());

  ;; first run
  if (slice_bits(get_data().begin_parse()) == 0) {
    ;; cell dummy_cell = begin_cell().end_cell(); cell last = begin_cell().store_ref(dummy_cell).end_cell(); int ct = 11;
    ;; while (ct){
    ;;   last = begin_cell().store_ref(last).store_ref(dummy_cell).end_cell(); ct -= 1;
    ;; }
    ;; cell cell_tree = begin_cell().store_uint(0xffffffffffffffffffffffffffffffffffffffffffffffff, 192).store_ref(last).end_cell();

    cell cell_tree = new_dict();
    cell_tree~udict_set(16, 0, begin_cell().end_cell().begin_parse());
    
    int ct = 12; builder b = begin_cell().store_ref(cell_tree).store_uint(12, 16);  ;; last_idx
    while (ct) {  ;; dummy (score, idx) pairs
      b~store_int(-1, 33); b~store_uint(ct, 16); ct -= 1;   ;; CAUTION, unpack with load_int for score
    }

    ;; ref_2 and ref_3 for (value, idx) x6
    builder b_1 = begin_cell(); builder b_2 = begin_cell();
    ct = 12; ;; dummy (value, idx) pairs
    while(ct > 6){
      b_1~store_uint(0x1ffffffffffffffffffffffffffffffff, 129); b_1~store_uint(ct, 16); ct -= 1;    ;; CAUTION 129-bits used
    }
    while (ct) {
      b_2~store_uint(0x1ffffffffffffffffffffffffffffffff, 129); b_2~store_uint(ct, 16); ct -= 1;    ;; CAUTION 129-bits used
    }
    b = b.store_ref(b_1.end_cell()); b = b.store_ref(b_2.end_cell());

    cell my_data = b.end_cell();
    set_data(my_data);
  }

  slice sl = get_data().begin_parse(); slice sl_2 = sl;
  int curr_idx = sl~load_uint(16) + 1;
  int highest_score = score; int highest_score_idx = curr_idx;
  int lowest_value = value; int lowest_value_idx = curr_idx; int lowest_value_secondary = value;
  int ct = 12; int entries = 1; cell cell_tree = sl~load_ref();
  while (ct) {
    int curr_score = sl~load_int(33); int curr_score_idx = sl~load_uint(16); ct -= 1;
    if (curr_score != -1){ entries += 1; }
    if (curr_score > highest_score) {
      highest_score = curr_score; highest_score_idx = curr_score_idx;
    }
  }
  ct = 6; slice sl_1 = (sl~load_ref()).begin_parse();
  while (ct) {
    int curr_value = sl_1~load_uint(129); int curr_value_idx = sl_1~load_uint(16); ct -= 1;
    if (curr_value < lowest_value) {
      lowest_value = curr_value; lowest_value_idx = curr_value_idx;
    }
    if (curr_value_idx == highest_score_idx) {
      lowest_value_secondary = curr_value;
    }
  }
  ct = 6; sl_1 = (sl~load_ref()).begin_parse();
  while (ct) {
    int curr_value = sl_1~load_uint(129); int curr_value_idx = sl_1~load_uint(16); ct -= 1;
    if (curr_value < lowest_value) {
      lowest_value = curr_value; lowest_value_idx = curr_value_idx;
    }
    if (curr_value_idx == highest_score_idx) {
      lowest_value_secondary = curr_value;
    }
  }

  
  cell_tree = set_body_3(msg, curr_idx, cell_tree);
  if (entries == 12){
    (cell_tree, cell to_send) = get_body_3(cell_tree, lowest_value_idx);
    send_cell(to_send, lowest_value);
    if (lowest_value_idx != highest_score_idx) {
      (cell_tree, to_send) = get_body_3(cell_tree, highest_score_idx);
      send_cell(to_send, lowest_value_secondary);
    }
  }

  ;; Update persistent storage
  ct = 12; builder b = begin_cell().store_uint(sl_2~load_uint(16) + 1, 16).store_ref(cell_tree); int remaining = 12;
  while (ct) {
    int curr_score = sl_2~load_int(33); int curr_score_idx = sl_2~load_uint(16); ct -= 1;
    if (curr_score != -1){    ;; not default value
      if (entries < 12){
        b~store_int(curr_score, 33); b~store_uint(curr_score_idx, 16); remaining -= 1;
      } else {
        if ((curr_score_idx != highest_score_idx) & (curr_score_idx != lowest_value_idx)){
          b~store_int(curr_score, 33); b~store_uint(curr_score_idx, 16); remaining -= 1;
        }
      }
    }
  }

  if (entries < 12) {
    b~store_int(score, 33); b~store_uint(curr_idx, 16); remaining -= 1;
  } else {
    if ((highest_score_idx != curr_idx) & (lowest_value_idx != curr_idx)){
      b~store_int(score, 33); b~store_uint(curr_idx, 16); remaining -= 1;
    }
  }
  
  while (remaining) {
    b~store_int(-1, 33); b~store_uint(0, 16); remaining -= 1;
  }

  sl_2~load_ref();  ;; get rid of cell_tree, we aren't doing it's readback
  ct = 6; remaining = 6; sl_1 = (sl_2~load_ref()).begin_parse(); builder b_1 = begin_cell();
  int placed_incoming = 0;
  while (ct){
    int curr_value = sl_1~load_uint(129); int curr_value_idx = sl_1~load_uint(16); ct -= 1;
    if (curr_value != 0x1ffffffffffffffffffffffffffffffff){
      if (entries < 12){
        b_1~store_uint(curr_value, 129); b_1~store_uint(curr_value_idx, 16); remaining -= 1;
      } else {
        if ((curr_value_idx != highest_score_idx) & (curr_value_idx != lowest_value_idx)) {
          b_1~store_uint(curr_value, 129); b_1~store_uint(curr_value_idx, 16); remaining -= 1;
        }
      }
    }
  }

  if (remaining > 0) {
    if (entries < 12) {
      b_1~store_int(value, 129); b_1~store_uint(curr_idx, 16); remaining -= 1;
      placed_incoming = -1;    ;; prevent from being added in next builder
    } else {
      if ((highest_score_idx != curr_idx) & (lowest_value_idx != curr_idx)){
        b_1~store_int(value, 129); b_1~store_uint(curr_idx, 16); remaining -= 1;
        placed_incoming = -1;
      }
    }
  }
  
  while (remaining) {
    b_1~store_uint(0x1ffffffffffffffffffffffffffffffff, 129); b_1~store_uint(0, 16); remaining -= 1;
  }

  b = b.store_ref(b_1.end_cell());

  ct = 6; remaining = 6; sl_1 = (sl_2~load_ref()).begin_parse(); b_1 = begin_cell();
  while (ct){
    int curr_value = sl_1~load_uint(129); int curr_value_idx = sl_1~load_uint(16); ct -= 1;
    if (curr_value != 0x1ffffffffffffffffffffffffffffffff){
      if (entries < 12){
        b_1~store_uint(curr_value, 129); b_1~store_uint(curr_value_idx, 16); remaining -= 1;
      } else {
        if ((curr_value_idx != highest_score_idx) & (curr_value_idx != lowest_value_idx)) {
          b_1~store_uint(curr_value, 129); b_1~store_uint(curr_value_idx, 16); remaining -= 1;
        }
      }
    }
  }

  if ((remaining > 0) & (~ placed_incoming)) {
    if (entries < 12) {
      b_1~store_int(value, 129); b_1~store_uint(curr_idx, 16); remaining -= 1;
    } else {
      if ((highest_score_idx != curr_idx) & (lowest_value_idx != curr_idx)){
        b_1~store_int(value, 129); b_1~store_uint(curr_idx, 16); remaining -= 1;
      }
    }
  }
  
  while (remaining) {
    b_1~store_uint(0x1ffffffffffffffffffffffffffffffff, 129); b_1~store_uint(0, 16); remaining -= 1;
  }

  b = b.store_ref(b_1.end_cell());

  set_data(b.end_cell());
}

(int, int) fme (int a, int b) method_id {
  cell dummy_cell = begin_cell().store_uint(12, 8).end_cell(); cell last = begin_cell().store_ref(dummy_cell).end_cell(); int ct = 11;
  while (ct){
    last = begin_cell().store_ref(last).store_ref(begin_cell().store_uint(ct, 8).end_cell()).end_cell(); ct -= 1;
  }
  cell cell_tree = begin_cell().store_uint(0x000100020003000400050006000700080009000a000bffff, 192).store_ref(last).end_cell();

  cell cell_tree = new_dict();
  cell_tree~udict_set(16, 0, begin_cell().end_cell().begin_parse());
  ~dump([990, cell_tree]);
  ;;(cell_tree, cell msg) = get_body_3(cell_tree, 0x0005);
  ;;~dump([1, msg.begin_parse(), cell_tree.begin_parse()]);
  cell_tree = set_body_3(begin_cell().store_uint(0xbabe, 32).end_cell(), 0x0020, cell_tree);
  ~dump([2, cell_tree.begin_parse()]);
  (cell_tree, cell msg) = get_body_3(cell_tree, 0x0020);
  ~dump([1, msg, cell_tree.begin_parse()]);
  cell a = new_dict();
  ~dump(9);
  ~dump(a);
  return (3, 4);
}
