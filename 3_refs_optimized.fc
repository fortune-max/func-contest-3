{-
  Contract receives internal message with text comment (https://ton.org/docs/develop/smart-contracts/guidelines/internal-messages) which contains algebraic equation containing numbers in decimal representation and operations `(+-*/)`.
  All values (including intermediate) fit 256 bit. Contract should respond (coins = 0, mode = 64) with correct answer encoded as text comment back.
  It is guaranteed that all tests contain a valid algebraic equations.
  Division result should be rounded down. It is guaranteed that tests do not contain division by zero.
-}

int get_total_bits (slice sl) inline {
  int ans = slice_bits(sl);
  while (slice_refs(sl)) {
    sl = (sl~load_ref()).begin_parse();
    ans += slice_bits(sl);
  }
  return ans;
}

slice tointeger_slice(int num) {
  builder b = begin_cell(); int is_negative = 0;
  if (num < 0) {
    is_negative = -1; num *= -1;
  }
  do {
    int digit = num % 10;
    num /= 10;
    b~store_uint(digit + 48, 8);
  } until (num == 0);
  cell ans = b.end_cell();

  b = begin_cell();
  if (is_negative) {
    b~store_uint(45, 8);
  }
  slice sl = ans.begin_parse();
  int length = slice_bits(sl);
  int neg_idx = 8;
  do {
    (_, int tmp) = sl.slice_last(neg_idx).load_uint(8);
    b~store_uint(tmp, 8);
    neg_idx += 8;
  } until (neg_idx > length);
  return b.end_cell().begin_parse();
}

;; load int across slices and refs. to be followed by a skip_bits_custom() call as this is for lookaheads
;; return bits requested and new slice to continue reading from
(slice, slice) load_bits_custom (slice sl, int bit_shift_global) inline  {
  builder b = begin_cell();
  while (bit_shift_global) {
    int to_take = min(slice_bits(sl), bit_shift_global);
    b~store_uint(sl~load_uint(to_take), to_take);
    bit_shift_global -= to_take;
    if ((slice_bits(sl) == 0) & slice_refs(sl)) {
      sl = (sl~load_ref()).begin_parse();
    }
  }
  return (b.end_cell().begin_parse(), sl);
}

slice skip_bits_custom(slice sl, int bit_shift_global) inline {
  while (bit_shift_global){
    int to_take = min(slice_bits(sl), bit_shift_global);
    sl~skip_bits(to_take);
    bit_shift_global -= to_take;
    if ((slice_bits(sl) == 0) & slice_refs(sl)) {
      sl = (sl~load_ref()).begin_parse();
    }
  }
  return sl;
}

;; expects at least 1 digit (8-bit) in slice
(int, int, slice) nxt_num(slice sl, int bits_left_local, int bits_left_global) inline {
  (int num, int bits_done) = (0, 0);
  slice sl_prev_byte = sl;
  while (bits_left_global) {
    int hint = -1;
    if (bits_left_local >= 8){
      sl_prev_byte = sl;
      hint = sl~load_uint(8);
    } else {
      sl_prev_byte = sl;
      (slice tmp_sl, sl) = load_bits_custom(sl, 8);
      hint = tmp_sl~load_uint(8);
      bits_left_local = slice_bits(sl);
    }
    if ((hint >= 48) & (hint <= 57)){
      bits_done += 8; bits_left_local -= 8; bits_left_global -= 8;
      num = 10 * num + (hint - 48);
    } else {
      bits_left_global = 0; sl = sl_prev_byte;
    }
  }
  return (num, bits_done, sl);
}

int perform_op (int left, int right, int sign) {  ;; warning DO NOT inline this
  if (sign == 43){
    return left + right;
  } elseif (sign == 47) {
    return left / right;
  } elseif (sign == 42) {
    return left * right;
  } else {
    return left - right;
  }
}

(int, int, slice) mul_div (slice sl, int bits_left_local, int bits_left_global);

;; NUM ), +/*-) ; (, ( NUM ; +/*-, ( NUM

;; must start with a bracket if subseq run, which must contain at least one integer
;; may end with eof or )
(int, int, slice) brackets (slice sl, int bits_left_local, int bits_left_global, int first_run) inline {
  int bits_done = 0;
  if (~ first_run){ ;; RM first bracket
    if (bits_left_local >= 8){
      sl~skip_bits(8); bits_done += 8; bits_left_local -= 8; bits_left_global -= 8;
    } else {
      sl = skip_bits_custom(sl, 8);
      bits_done += 8; bits_left_local = slice_bits(sl); bits_left_global -= 8;
    }
  }

  (int ans, int processed, int sign, int hint) = (0, 0, 43, -1);
  slice new_slice = sl;    ;; placeholder to set scope
  do {
    (int sub_calc, processed, sl) = mul_div(sl, bits_left_local, bits_left_global);
    if (bits_left_local >= processed){
      bits_done += processed; bits_left_local -= processed; bits_left_global -= processed;
    } else {
      bits_done += processed; bits_left_local = slice_bits(sl); bits_left_global -= processed;
    }
    ans = perform_op(ans, sub_calc, sign);
    if (bits_left_global >= 8) {
      if (bits_left_local >= 8){
        (_, hint) = sl.load_uint(8);
      } else {
        (slice tmp_slice, new_slice) = load_bits_custom(sl, 8);
        hint = tmp_slice~load_uint(8);
      }
      if (hint == 41) {   ;; met end of bracket
        bits_done += 8; bits_left_global = 0;
        if (bits_left_local >= 8){
          sl~skip_bits(8);
        } else {
          sl = skip_bits_custom(sl, 8);
        }
      } else {
        sign = hint;
        if (bits_left_local >= 8){
          sl~skip_bits(8); bits_done += 8; bits_left_local -= 8; bits_left_global -= 8;
        } else {
          sl = new_slice; bits_done += 8; bits_left_local = slice_bits(sl); bits_left_global -= 8;
        }
      }
    }
  } until (bits_left_global == 0);
  return (ans, bits_done, sl);
}

;; expects at least 1 digit in slice. Proceeds execution till + or - or eof met
(int, int, slice) mul_div (slice sl, int bits_left_local, int bits_left_global) inline {
  (int ans, int processed, int bits_done) = (-1, 0, 0);
  int hint = -1; slice new_slice = sl;    ;; placeholder to set scope
  if (bits_left_local >= 8){
    (_, hint) = sl.load_uint(8);
  } else {
    (slice tmp_slice, _) = load_bits_custom(sl, 8);
    hint = tmp_slice~load_uint(8);
  }
  if (hint == 40) { ;; left_bracket after + or - sign
    (ans, processed, sl) = brackets(sl, bits_left_local, bits_left_global, 0);
    if (bits_left_local >= processed){
      bits_done += processed; bits_left_local -= processed; bits_left_global -= processed;
    } else {
      bits_done += processed; bits_left_local = slice_bits(sl); bits_left_global -= processed;
    }
  } else {  ;; NUM after + or - sign
    (ans, processed, sl) = nxt_num(sl, bits_left_local, bits_left_global);
    if (bits_left_local >= processed){
      bits_done += processed; bits_left_local -= processed; bits_left_global -= processed;
    } else {
      bits_done += processed; bits_left_local = slice_bits(sl); bits_left_global -= processed;
    }
  }
  while (bits_left_global >= 8) {
    if (bits_left_local >= 8){
      (_, hint) = sl.load_uint(8);
    } else {
      (slice tmp_slice, new_slice) = load_bits_custom(sl, 8);
      hint = tmp_slice~load_uint(8);
    }
    if ((hint == 41) | (hint == 43) | (hint == 45)) {  ;; right_bracket, + or - after NUM
      bits_left_global = 0;
    } else { ;; * or / sign after NUM or right_bracket
      int sign = hint;
      if (bits_left_local >= 8){
        sl~skip_bits(8); bits_left_local -= 8; bits_done += 8; bits_left_global -= 8;
      } else {
        sl = new_slice; bits_left_local = slice_bits(sl); bits_done += 8; bits_left_global -= 8;
      }
      if (bits_left_local >= 8){
        (_, hint) = sl.load_uint(8);
      } else {
        (slice tmp_slice, new_slice) = load_bits_custom(sl, 8);
        hint = tmp_slice~load_uint(8);
      }
      if (hint == 40) {     ;; left_bracket after sign
        (int sub_calc, processed, sl) = brackets(sl, bits_left_local, bits_left_global, 0);
        if (bits_left_local >= processed){
          bits_done += processed; bits_left_local -= processed; bits_left_global -= processed;
        } else {
          bits_done += processed; bits_left_local = slice_bits(sl); bits_left_global -= processed;
        }
        ans = perform_op(ans, sub_calc, sign);
      } else {        ;; NUM after sign
        (int sub_calc, processed, sl) = nxt_num(sl, bits_left_local, bits_left_global);
        if (bits_left_local >= processed){
          bits_done += processed; bits_left_local -= processed; bits_left_global -= processed;
        } else {
          bits_done += processed; bits_left_local = slice_bits(sl); bits_left_global -= processed;
        }
        ans = perform_op(ans, sub_calc, sign);
      }
    }
  }
  return (ans, bits_done, sl);
}

;; testable
() recv_internal (cell message, slice in_msg_body) {
  slice sl = message.begin_parse();
  int flags = sl~load_uint(4); ;; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool
  slice sender_address = sl~load_msg_addr();

  in_msg_body~load_uint(32);
  (int ans, int bits, _) = brackets(in_msg_body, slice_bits(in_msg_body), get_total_bits(in_msg_body), -1);

  cell response_message_body = begin_cell()
    .store_uint(0, 32)  ;; op_code 0, simple message with comment;
    .store_slice(tointeger_slice(ans)) ;; ans in ascii hex
    .end_cell();
  
  cell response_msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(sender_address)  ;; addr dest
    .store_grams(0)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 0)
    .store_uint(1, 1)
    .store_ref(response_message_body)
    .end_cell();

  send_raw_message(response_msg, 64);
}

(int, int) fme (int a, int b) method_id {
    cell msg = begin_cell().store_uint(0x2d392b282d322d34292a282d382b3229, 128).end_cell();     ;; 2 => 50
      cell msg = begin_cell().store_uint(0x3233313538343137383437343633323339303834373134313937303031373337, 256).store_ref(
      begin_cell().store_uint(0x3538313537303635333939363933333132383131323830373839313531363830, 256).store_ref(
        begin_cell().store_uint(0x31353832363235393237393837, 104)    ;; max_int / 5
        .store_uint(0x2a, 8) ;; *
        .store_uint(0x35, 8)  ;; 5
        .end_cell()
      ).end_cell()
  ).end_cell();
    slice sl = msg.begin_parse();
    (int ans, int bits, _) = brackets(sl,slice_bits(sl), get_total_bits(sl), -1);
    ~dump([911, ans]);
    return (3, 4);
}
