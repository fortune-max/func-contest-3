global cell big_cell_dup, cell tuple_dict_decompose, cell tuple_dict_compose, cell instantiated_cells_map;
(cell, int) udict_get_ref_2?(cell dict, int key_len, int index) asm(index dict key_len) "DICTUGETREF" "NULLSWAPIFNOT";
(slice, int) udict_get_2?(cell dict, int key_len, int index) asm(index dict key_len) "DICTUGET" "NULLSWAPIFNOT";

int rehash(int old_hash){
  int MOD = 1606938044258990275541962092341162602522202993782792835301301;       ;; 2^200 - 75 (can fit in 200 - bits)
  return old_hash % MOD;
}

int add_cell_to_tuple(slice slice_to_add) {
  int self_hash = rehash(slice_hash(slice_to_add));
  int tuple_idx = 1 + (self_hash % 251);    ;; using idx 1 to 251 (252 - 255 tuple indexes unused)
  (cell hash_to_content_and_children_map, _) = udict_get_ref_2?(tuple_dict_decompose, 8, tuple_idx);
  (_, int already_stored) = udict_get_2?(hash_to_content_and_children_map, 200, self_hash);
  if (~ already_stored){
    builder b = begin_cell(); int children_count = slice_refs(slice_to_add); int ct = 0;
    while (ct < children_count) {
      ct += 1; cell child_cell = slice_to_add~load_ref();
      b~store_uint(rehash(cell_hash(child_cell)), 200);     ;; Must be >= MOD bits
    }
    b = b.store_ref(begin_cell().store_slice(slice_to_add).end_cell());   ;; No refs left
    slice to_store = b.end_cell().begin_parse();
    hash_to_content_and_children_map~udict_set(200, self_hash, to_store);
    tuple_dict_decompose = udict_set_ref(tuple_dict_decompose, 8, tuple_idx, hash_to_content_and_children_map);
  }
  return already_stored;
}

(slice, slice) get_cell (slice path) {
  cell curr_cell = big_cell_dup; slice path_dup = path; path~load_uint(4);  ;; 11 prefix first cell
  slice ref_to_curr_cell_sl = path;    ;; placeholder to reference slice in global scope
  while (slice_bits(path)){
    ref_to_curr_cell_sl = curr_cell.begin_parse(); int nxt = path~load_uint(4) >> 2;
    while (nxt) { ref_to_curr_cell_sl~load_ref(); nxt -= 1; }
    curr_cell = ref_to_curr_cell_sl~load_ref();
  }
  slice curr_cell_sl = curr_cell.begin_parse();
  int has_next_sibling = abs(slice_refs(ref_to_curr_cell_sl) > 0); int has_child = abs(slice_refs(curr_cell_sl) > 0);
  slice updated_path = begin_cell().store_slice(skip_last_bits(path_dup, 2)).store_uint(has_next_sibling, 1).store_uint(has_child, 1).end_cell().begin_parse();
  return (curr_cell_sl, updated_path);
}

;; Takes fully qualified path seq, 10 - addr, 1 - has sibling, 1 - has child
(slice, int) get_next_path(slice path, int already_stored) {
  if ((~ already_stored) & slice_last(path, 1).preload_uint(1)) {
    ;; has child, so next is it's first child, last two bits are dummies as we don't know if child has children or siblings
    return (begin_cell().store_slice(path).store_uint(0, 4).end_cell().begin_parse(), 1);
  } else {
    ;; 0b1101 0011 0001 0001 0000
    int has_no_next_sibling = ~ (slice_last(path, 2).preload_uint(2) & 2 > 0);
    while (has_no_next_sibling) {
      path~skip_last_bits(4);
      has_no_next_sibling = slice_bits(path) ? ~ (slice_last(path, 2).preload_uint(2) & 2 > 0) : 0;
    }
    if (slice_bits(path)) {
      int ct = slice_last(path, 4).preload_uint(4) >> 2;
      return (begin_cell().store_slice(skip_last_bits(path, 4)).store_uint(ct + 1, 2).store_uint(0, 2).end_cell().begin_parse(), 1);
    } else {
      return (path, 0); ;; fully explored cell path
    }
  }
}

int tuple_within_limits?(tuple final_result) impure {
  int ct = 0;
  while (ct < 255) {
    (int cell_ct, int bits_ct, _) = compute_data_size(final_result.at(ct), 9000); ct += 1;
    while (cell_ct >= 1000) { ~dump(99); }
    while (bits_ct >= 40000) { ~dump(99); }
  }
  return -1;
}

;; testable
tuple decomposite (cell big_cell, slice destination_address) method_id {
  big_cell_dup = big_cell; tuple_dict_decompose = new_dict();
  
  slice hash_store = begin_cell()
    .store_uint(rehash(cell_hash(big_cell)), 200)
    .store_uint(cell_hash(big_cell), 256)
    .store_uint(slice_hash(destination_address), 256)
    .end_cell().begin_parse();
  
  cell meta_data = new_dict();
  meta_data~udict_set(8, 0, hash_store);
  meta_data~udict_set(8, 1, destination_address);
  tuple_dict_decompose = udict_set_ref(tuple_dict_decompose, 8, 0, meta_data);

  cell hash_to_content_and_children_map_dummy = new_dict(); int ct = 1;
  hash_to_content_and_children_map_dummy~udict_set(200, 0xffffffffffffffffffffffffffffffffffffffffffffffffff, begin_cell().end_cell().begin_parse());
  while (ct < 255) {
    tuple_dict_decompose = udict_set_ref(tuple_dict_decompose, 8, ct, hash_to_content_and_children_map_dummy); ct += 1;
  }

  int some_cells_left = -1;
  slice curr_path = begin_cell().store_uint(13, 4).end_cell().begin_parse();
  do {
    (slice to_add, curr_path) = get_cell(curr_path);
    int already_stored = add_cell_to_tuple(to_add);
    (curr_path, some_cells_left) = get_next_path(curr_path, already_stored);
  } until (some_cells_left == 0);
  ;; (int cell_ct, int bit_ct, _) = compute_data_size(big_cell, 9000); throw_if(100, cell_ct >= 4000);
  int ct = 0; tuple final_result = empty_tuple();
  while (ct < 255) {
    (cell tuple_elem, _) = udict_get_ref_2?(tuple_dict_decompose, 8, ct);
    final_result~tpush(tuple_elem); ct += 1;
  }
  tuple_within_limits?(final_result);
  return final_result;
}

cell cycle_cell_compose(int self_hash) {
  int tuple_idx = 1 + (self_hash % 251);
  (cell hash_to_content_and_children_map, _) = udict_get_ref_2?(tuple_dict_compose, 8, tuple_idx);
  (slice curr_cell_data, _) = udict_get_2?(hash_to_content_and_children_map, 200, self_hash);
  slice cell_content_sl = curr_cell_data.preload_ref().begin_parse();
  builder curr_cell_builder = begin_cell().store_slice(cell_content_sl);
  int children_count = slice_bits(curr_cell_data) / 200; int ct = 0;
  while (ct < children_count){
    ct += 1; int child_hash = curr_cell_data~load_uint(200);
    cell child_cell = cycle_cell_compose(child_hash);
    curr_cell_builder = curr_cell_builder.store_ref(child_cell);
  }
  return curr_cell_builder.end_cell();
}

int attempt_to_instantiate (int hash, slice children_and_content) {
  int children_ct = slice_bits(children_and_content) / 200; int all_present = -1; int ct = 0;
  builder b = begin_cell();
  while (all_present & (ct < children_ct)) {
    int child_hsh = children_and_content~load_uint(200);
    (cell child_cell, int child_present) = udict_get_ref_2?(instantiated_cells_map, 200, child_hsh);
    if (child_present){ b = b.store_ref(child_cell); }
    all_present &= child_present;
    ct += 1;
  }

  if ((hash == 0xffffffffffffffffffffffffffffffffffffffffffffffffff) | (~ all_present)){
    return 0;
  } else {  ;; can be instantiated, either no children, or has all children instantiated  
    b = b.store_slice(children_and_content.preload_ref().begin_parse());
    cell instantiated_cell = b.end_cell();
    instantiated_cells_map = udict_set_ref(instantiated_cells_map, 200, hash, instantiated_cell);
    return 1;
  }
}

cell compose(tuple final_result) {
  int ct = 0; tuple_dict_compose = new_dict(); instantiated_cells_map = new_dict();
  while (ct < 254) {  ;; in recv_internal, idx 254 is trigger, not present
    tuple_dict_compose = udict_set_ref(tuple_dict_compose, 8, ct, final_result.at(ct)); ct += 1;
  }

  int instantiated_cell_ct = -1;
  while (instantiated_cell_ct != 0) { ;; todo use do-while if this is problematic
    int tuple_idx = 1; instantiated_cell_ct = 0;
    while (tuple_idx < 252) {  ;; 1 - 251 tuple_idx used
      int last_hash = 0; int found_nxt = -1; int success = 0;
      while (found_nxt){
        (cell hash_to_content_and_children_map, _) = udict_get_ref_2?(tuple_dict_compose, 8, tuple_idx);
        (last_hash, slice children_and_content, found_nxt) = udict_get_next?(hash_to_content_and_children_map, 200, last_hash); ;; we are sure no 0 as keys
        if (found_nxt){
          success = attempt_to_instantiate(last_hash, children_and_content);
          if (success) {
            instantiated_cell_ct += 1;
            (hash_to_content_and_children_map, _) = udict_delete?(hash_to_content_and_children_map, 200, last_hash);
            tuple_dict_compose = udict_set_ref(tuple_dict_compose, 8, tuple_idx, hash_to_content_and_children_map);
          }
        }
      }
      tuple_idx += 1;
    }
  }

  cell meta_data = final_result.at(0);
  (slice hash_store, _) = udict_get_2?(meta_data, 8, 0);
  int start_hash = hash_store~load_uint(200);
  int regular_hash = hash_store~load_uint(256);

  (cell big_cell, _) = udict_get_ref_2?(instantiated_cells_map, 200, start_hash);

  return big_cell;
}


;; testable
() recv_internal (slice body) { ;;}
;; () holla (slice body) impure {
  slice my_data_sl = get_data().begin_parse();
  int operation_mode = slice_bits(my_data_sl);
  if (operation_mode == 0) {
    ;; first run
    cell meta_data = begin_cell().store_slice(body).end_cell();
    cell recvd_tuple_map = new_dict();
    recvd_tuple_map~udict_set_ref(8, 0, meta_data);
    cell my_data = begin_cell().store_uint(0, 8).store_dict(recvd_tuple_map).end_cell();
    set_data(my_data);
  } elseif (operation_mode == 1){
    ;; nothing to do, already sent payload
  } else {
    cell hash_to_cell = begin_cell().store_slice(body).end_cell();
    int curr_idx = my_data_sl~load_uint(8) + 1;
    cell recvd_tuple_map = my_data_sl~load_dict();

    if (curr_idx == 254){
      ;; reached end of necessary tuple elements, begin send
      tuple final_result = empty_tuple(); int ct = 0;
      while (ct < curr_idx) {
        (cell tuple_elem, _) = udict_get_ref_2?(recvd_tuple_map, 8, ct);
        final_result~tpush(tuple_elem); ct += 1;
      }
      cell meta_data = final_result.at(0);
      (slice large_cell_hash_sl, _) = udict_get_2?(meta_data, 8, 0);
      int large_cell_rehash = large_cell_hash_sl~load_uint(200);
      int large_cell_hash = large_cell_hash_sl~load_uint(256);
      int dest_addr_hash = large_cell_hash_sl~load_uint(256);
      (slice dest_address, _) = udict_get_2?(meta_data, 8, 1);
      cell large_cell = compose(final_result);
      ;; ~dump([299, cell_hash(large_cell), large_cell, large_cell.begin_parse()]);
      cell msg_to_send = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(dest_address)
        .store_coins(0)
        .store_uint(1, 107)
        .store_ref(large_cell)
        .end_cell();
      ;; while (large_cell_hash != cell_hash(large_cell)) { ~dump(99); }
      ;; while (dest_addr_hash != slice_hash(dest_address)) { ~dump(99); }
      send_raw_message(msg_to_send, 0);
      set_data(begin_cell().store_uint(1, 1).end_cell());
    } else {
      ;; save this, more usefuls incoming
      recvd_tuple_map~udict_set_ref(8, curr_idx, hash_to_cell);
      cell my_data = begin_cell().store_uint(curr_idx, 8).store_dict(recvd_tuple_map).end_cell();
      set_data(my_data);
    }
  }
}


(int, int) fme (int a, int b) method_id {
  cell msg = begin_cell()
    .store_uint(0x312b322b332b342b352b362b372b382b392b31302b31312b31322b31332b3134, 256)
    .store_uint(0x2b31352b31362b31372b31382b31392b32302b32312b32322b32332b32342b32, 256)
    .store_uint(0x352b32362b32372b32382b32392b33302b33312b33322b33332b33342b33352b, 256)
    .store_uint(0x33362b33372b33382b33392b34302b34312b34322b34332b34342b34352b34, 248)
    .store_ref(begin_cell()
       .store_uint(0x362b34372b34382b34392b35302b35312b35322b35332b35342b35352b35362b, 256)
       .store_uint(0x35372b35382b35392b36302b36312b36322b36332b36342b36352b36362b3637, 256)
       .store_uint(0x2b36382b36392b37302b37312b37322b37332b37342b37352b37362b37372b37, 256)
       .store_uint(0x382b37392b38302b38312b38322b38332b38342b38352b38362b38372b3838, 248)
       .store_ref(begin_cell()
           .store_uint(0x2b38392b39302b39312b39322b39332b39342b39352b39362b39372b39382b39, 256)
           .store_uint(0x392b313030, 40)
           .store_ref(begin_cell()
       .store_uint(0x362b34372b34382b34392b35302b35312b35322b35332b35342b35352b35362b, 256)
       .store_uint(0x35372b35382b35392b36302b36312b36322b36332b36342b36352b36362b3637, 256)
       .store_uint(0x2b36382b36392b37302b37312b37322b37332b37342b37352b37362b37372b37, 256)
       .store_uint(0x382b37392b38302b38312b38322b38332b38342b38352b38362b38372b3838, 248)
       .store_ref(begin_cell()
           .store_uint(0x2b38392b39302b39312b39322b39332b39342b39352b39362b39372b39382b39, 256)
           .store_uint(0x392b313030, 40)
           .end_cell())
       .end_cell())
           .end_cell())
       .end_cell())
    .store_ref(begin_cell()
       .store_uint(0x362b34372b34382b34392b35302b35312b35322b35332b35342b35352b35362b, 256)
       .store_uint(0x35372b35382b35392b36302b36312b36322b36332b36342b36352b36362b3637, 256)
       .store_uint(0x2b36382b36392b37302b37312b37322b37332b37342b37352b37362b37372b37, 256)
       .store_uint(0x382b37392b38302b38312b38322b38332b38342b38352b38362b38372b3838, 248)
       .store_ref(begin_cell()
           .store_uint(0x2b38392b39302b39312b39322b39332b39342b39352b39362b39372b39382b39, 256)
           .store_uint(0x392b313030, 40)
           .end_cell())
       .end_cell())
    .store_ref(begin_cell()
       .store_uint(0x362b34372b34382b34392b35302b35312b35322b35332b35342b35352b35362b, 256)
       .store_uint(0x35372b35382b35392b36302b36312b36322b36332b36342b36352b36362b3637, 256)
       .store_uint(0x2b36382b36392b37302b37312b37322b37332b37342b37352b37362b37372b37, 256)
       .store_uint(0x382b37392b38302b38312b38322b38332b38342b38352b38362b38372b3838, 248)
       .store_ref(begin_cell()
           .store_uint(0x2b38392b39302b39312b39322b39332b39342b39352b39362b39372b39382b39, 256)
           .store_uint(0x392b313030, 40)
           .end_cell())
       .end_cell())
       .store_ref(begin_cell()
       .store_uint(0x362b34372b34382b34392b35302b35312b35322b35332b35342b35352b35362b, 256)
       .store_uint(0x35372b35382b35392b36302b36312b36322b36332b36342b36352b36362b3637, 256)
       .store_uint(0x2b36382b36392b37302b37312b37322b37332b37342b37352b37362b37372b37, 256)
       .store_uint(0x382b37392b38302b38312b38322b38332b38342b38352b38362b38372b3838, 248)
       .store_ref(begin_cell()
           .store_uint(0x2b38392b39302b39312b39322b39332b39342b39352b39362b39372b39382b39, 256)
           .store_uint(0x392b313030, 40)
           .end_cell())
       .end_cell())
  .end_cell();
  tuple to_send = decomposite(msg, begin_cell().store_uint(8, 8).end_cell().begin_parse());
  ;; (slice value, _) = udict_get_2?(to_send.at(0), 8, 0);
  ;; int chsh_mod = value~load_uint(200); int cell_hash_crc = value~load_uint(256);
  ;; ~dump([cell_hash(compose(to_send)), cell_hash(msg)]);
  ;; ~dump(to_send);
  ;; int ct = 0; while (ct < 255){ holla(to_send.at(ct).begin_parse()); ct += 1; }
  return (3, 4);
}