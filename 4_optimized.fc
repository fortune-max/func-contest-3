{-
  Implement Curve25519 addition and multiplication.
-}

() recv_internal () {

}

(int, int) mymuldivmod(int x, int y, int z) asm "MULDIVMOD";

int expmod_2(int b, int e) inline {
  int res = 1;
  int MOD = 57896044618658097711785492504343953926634992332820282019728792003956564819949;
  while (e > 1){
    if (e & 1) {
      (_, res) = mymuldivmod(res, b, MOD);
    }
    (_, b) = mymuldivmod(b, b, MOD);
    e /= 2;
  }
  (_, int ans) = mymuldivmod(b, res, MOD);
  return ans;
}

int inv(int n) inline {
  int MOD = 57896044618658097711785492504343953926634992332820282019728792003956564819949;
  return expmod_2(n, MOD - 2);   ;; n should always be less than MOD
}

;; testable
(int,int) add(int x1, int y1, int x2, int y2) {
  ;; Add code here
  ;; return x,y coordinate of Point1 + Point2
  int MOD = 57896044618658097711785492504343953926634992332820282019728792003956564819949;
  int A = 486662;

  int l = 1;
  ;; x1 %= MOD; y1 %= MOD; x2 %= MOD; y2 %= MOD;   ;; May not be necessary

  if ((y1 != 0) & (y2 != 0)){
    if (x1 == x2){
      if (y1 == y2){ ;; double
        (_, l) = mymuldivmod(x1, x1, MOD);
        (_, l) = mymuldivmod(3, l, MOD);
        (_, int term_2) = mymuldivmod(2 * A, x1, MOD);
        l = (l + term_2 + 1) % MOD;
        (_, l) = mymuldivmod(l, inv(2 * y1), MOD);
      }
    } else { ;; distinct points
      (_, l) = mymuldivmod(y2 - y1, inv(x2 - x1), MOD);
    }
  }
  
  ;; (_, int l_sq) = mymuldivmod(l, l, MOD);
  ;; (_, int l_cb) = mymuldivmod(l_sq, l, MOD);

  ;; int x3 = ((l_sq - A) - (x1 + x2) % MOD) % MOD;

  ;; (_, int y3) = mymuldivmod(l, x1 - x3, MOD);
  ;; y3 = (y3 - y1) % MOD;

  if ((y1 == 0) | (y2 == 0)){ ;; infinity calculations
    if (y1 == y2) {
      return (0, 0); ;; O + O = O
    } else {
      if (y1 != 0){
        return (x1, y1); ;; P + O = P
      } else {
        return (x2, y2); ;; O + P = P
      }
    }
  } else {
    if (x1 == x2){
      if (y1 == y2){
        (_, int l_sq) = mymuldivmod(l, l, MOD);

        int x3 = ((l_sq - A) - (x1 + x2) % MOD) % MOD;

        (_, int y3) = mymuldivmod(l, x1 - x3, MOD);
        y3 = (y3 - y1) % MOD;
        return (x3, y3); ;; double points P + P = Q
      } else {
        return (0, 0); ;; point and it's negation return âˆž (P + -P = O)
      }
    } else {
      (_, int l_sq) = mymuldivmod(l, l, MOD);

      int x3 = ((l_sq - A) - (x1 + x2) % MOD) % MOD;

      (_, int y3) = mymuldivmod(l, x1 - x3, MOD);
      y3 = (y3 - y1) % MOD;
      return (x3, y3); ;; distinct points P + Q = R
    }
  }
}


(int, int) cswap(int swap, int x_2, int x_3) inline {
  int MOD = 57896044618658097711785492504343953926634992332820282019728792003956564819949;
  int dummy = swap * ((x_2 - x_3) % MOD);
  x_2 = (x_2 - dummy) % MOD;
  x_3 = (x_3 + dummy) % MOD;
  return (x_2, x_3);
}

int get_bits(int x) inline {
  int bits = 0;
  while (x){
    bits += 1;
    x /= 2;
  }
  return bits;
}

;; testable
int mul(int x1, int factor) {
  ;; Add code here
  ;; return x coordinate of Point1 * factor
  ;;(_, int l) = mymuldivmod(x, y, MOD);
  ;; u = x1, k = factor
  int x_1 = x1;
  int x_2 = 1;
  int z_2 = 0;
  int x_3 = x1;
  int z_3 = 1;
  int swap = 0;
  int k = factor;
  int MOD = 57896044618658097711785492504343953926634992332820282019728792003956564819949;
  int A24 = 121665;
  int t = get_bits(k) - 1;

  do {
    int k_t = (k >> t) & 1;
    swap ^= k_t;
    (x_2, x_3) = cswap(swap, x_2, x_3);
    (z_2, z_3) = cswap(swap, z_2, z_3);
    swap = k_t;

    int A = (x_2 + z_2) % MOD;
    (_, int AA) = mymuldivmod(A, A, MOD);
    int B = (x_2 - z_2) % MOD;
    (_, int BB) = mymuldivmod(B, B, MOD);
    int E = (AA - BB) % MOD;
    int C = (x_3 + z_3) % MOD;
    int D = (x_3 - z_3) % MOD;
    (_, int DA) = mymuldivmod(D, A, MOD);
    (_, int CB) = mymuldivmod(C, B, MOD);
    x_3 = (DA + CB) % MOD;
    (_, x_3) = mymuldivmod(x_3, x_3, MOD);
    int tmp = (DA - CB) % MOD;
    (_, tmp) = mymuldivmod(tmp, tmp, MOD);
    (_, z_3) = mymuldivmod(tmp, x_1, MOD);
    (_, x_2) = mymuldivmod(AA, BB, MOD);

    (_, tmp) = mymuldivmod(A24, E, MOD);
    tmp = (AA + tmp) % MOD;
    (_, z_2) = mymuldivmod(tmp, E, MOD);
    t -= 1;
  } until (t < 0);

  (x_2, x_3) = cswap(swap, x_2, x_3);
  (z_2, z_3) = cswap(swap, z_2, z_3);
  (_, int ans) = mymuldivmod(x_2, inv(z_2), MOD);
  return ans;
}

(int, int) fme (int a, int b) method_id {
  int MOD = 57896044618658097711785492504343953926634992332820282019728792003956564819949;
  int x1 = 56391866308239752110494101482511933051315484376135027248208522567059122930692;
  int y1 = 17671033459111968710988296061676524036652749365424210951665329683594356030064;
  int x2 = 39028180402644761518992797890514644768585183933988208227318855598921766377692;
  int y2 = 17694324391104469229766971147677885172552105420452910290862122102896539285628;
  (int x4, int y4) = (56391866308239752110494101482511933051315484376135027248208522567059122930692, 40225011159546129000797196442667429889982242967396071068063462320362208789885);

  ;; diff coords
  (int x3, int y3) = add(x1, y1, x2, y2);
  ~dump([9110, x3, y3]);
  (int x3, int y3) = add(x2, y2, x1, y1);
  ~dump([9115, x3, y3]);

  ;; same coords
  (int x4_2, int y4_2) = add(x4, y4, x4, y4);
  (int x4_4, int y4_4) = add(x4_2, y4_2, x4_2, y4_2);
  ~dump([912, x4_4, y4_4]);

  ;; mirror coords P + -P = O
  (int x5, int y5) = add(x2, y2, x2, (- y2) % MOD);
  ~dump([9130, x5, y5]);
  (x5, y5) = add(x2, y2, x2, - y2);
  ~dump([9135, x5, y5]);

  ;; O + O = O
  (int x6, int y6) = add(0, 0, 0, 0);
  ~dump([914, x6, y6]);

  ;; O + P = P
  (int x6, int y6) = add(0, 0, x4_4, y4_4);
  ~dump([9150, x6, y6]);
  (x6, y6) = add(x4_4, y4_4, 0, 0);
  ~dump([9155, x6, y6]);
  
  ;; P + Q + R = 0
  (int x3_1, int y3_1) = add(x3, - y3, x1, y1);
  (int x_123, int y_123) = add(x3_1, y3_1, x2, y2);
  ~dump([916, x_123, y_123]);


  ~dump([1021, mul(56391866308239752110494101482511933051315484376135027248208522567059122930692, 4)]);
  return (34, 43);

}
