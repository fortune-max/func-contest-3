;; use `toncli run_tests` to run, ensure .yaml, *.fc, build/*.fif present. No other cmds necessary.
[int, tuple, cell, tuple, int] test_validate_message_data() method_id(0) {
    cell data = begin_cell()    ;; input parameters for function to be tested. unsafe_tuple([1, 2]) for (int a, int b) fn.
    .store_uint(5044453795120075013, 63)
    .end_cell();
    cell empty_data = begin_cell().end_cell();
    int function_selector = 92350; ;; funtion to run (128253 is get_total, check contract.fif)
    return [function_selector, unsafe_tuple([9,3]), empty_data, get_c7(), null()];
}

_ test_validate_message(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(1) {
    ;;~dump(stack);
    {-
    int a = 1; int b = 2; int c = 9; int d = 23; int e = 393;
    a += 1; b += 2;
    dump_stack();
    if (-1){
        a += 9;
        if (-1){
            a += 1;
            b += 2;
        }
    }
    dump_stack();
    ~dump(a);
    ~dump(b);
    ;;slice dst_addt = second(second(stack));
    ;;~dump(stack);
    ;;~dump(dst_addt~load_uint(3));
    ;;~dump(dst_addt~load_uint(0)); ;; todo look at store_ref
    -}
    {-
    (cell merged_dict, cell discarded_dict) = (first(stack), second(stack));
    (int f_key, int s_key) = (-1, -1);
    slice f_slice = begin_cell().store_uint(15, 256).end_cell().begin_parse();
    slice s_slice = begin_cell().store_uint(15, 256).end_cell().begin_parse();
    int f_ok = 1; int s_ok = 1;
    do {
        (f_key, f_slice, f_ok) = merged_dict.udict_get_next?(256, f_key);
        ~dump(f_key);
        if (f_ok) {~dump(f_slice~load_uint(256));}
    } until(~ f_ok);

    ~dump(1000000000);
    do {
        (s_key, s_slice, s_ok) = discarded_dict.udict_get_next?(256, s_key);
        ~dump(s_key);
        if (s_ok) {~dump(s_slice~load_uint(256));}
    } until(~ s_ok);
    -}
}
