{-
  Contract handles internal messages with queries with the following scheme
  `_# score:uint32 value:(VarUInteger 16) msg:^Cell = MsgInternalBody`, where msg contains correct internal message and store it to contract.
  Once the number of stored queries reaches 12, contract should send and delete from storage message with the highest score and message with 
  the lowest value (if it is the same message, it should be sent once). Messages should be sent with mode 0 and coin amount should be equal to 
  value. All scores and values are guaranteed to be different
  Note, that in addition to gas-fees, storage fees will be used to determine final score. In particular, storage fee will be calculated like 
  between each message passes 3 days (259200 seconds). Gas-units price and storage fee params will correspond to current configs of 
  masterchain: 1000 nanoTON per 65536 bits per second + 500000 nanoTON per 65536 cells per second; gas is 10000 nanoTON per unit.


  Example:
  (message with score x and value y are represented as `(x,y)` )

  incoming message   outcoming messages     
  (1, 5)           | -
  (2, 6)           | -
  (3, 100)         | -
  (4, 2)           | -
  (5, 3)           | -
  (6, 4)           | -
  (7, 7)           | -
  (8, 8)           | -
  (9, 9)           | -
  (10, 10)         | -
  (11, 11)         | -
  (12, 20)         | (12,20); (4,2)
  (15, 1)          | -
  (13, 13)         | (15, 1)
  (14, 14)         | (14,14); (5,3)
-}

() send_cell (cell to_send, int value) impure {
  ;; ~dump([911, value]);
  cell address = begin_cell().store_uint(4, 3)
    .store_uint(0, 8)
    .store_uint(0, 256).end_cell();

  cell response_msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(address.begin_parse())
    .store_grams(value)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 0)
    .store_uint(1, 1)
    .store_ref(to_send)
    .end_cell();

  send_raw_message(response_msg, 0);
}

;; testable
() recv_internal (slice in_msg_body) { ;;}
  (int score, int value, cell msg) = (in_msg_body~load_uint(32), in_msg_body~load_grams(), in_msg_body~load_ref());
  ;; () holla (int score, int value) impure { cell msg = begin_cell().end_cell();
  ;; first run
  if (slice_bits(get_data().begin_parse()) == 0) {
    slice empty_slice = begin_cell().end_cell().begin_parse();
    
    cell map_score_to_key = new_dict();
    map_score_to_key~udict_set(160, 0, empty_slice);    ;; score int to idx cell slice    ;; TODO rm dummy dict sets

    cell map_value_to_key = new_dict();
    map_value_to_key~udict_set(160, 0xffffffffffffffffffffffffffffffff, empty_slice);    ;; value int to idx cell slice

    cell my_data = begin_cell()
      .store_uint(0, 16)    ;; entries stored
      .store_ref(map_score_to_key)
      .store_ref(map_value_to_key)
      .end_cell();
    set_data(my_data);
  }

  slice sl = get_data().begin_parse();
  int entries = sl~load_uint(16) + 1;
  cell map_score_to_key = sl~load_ref();
  cell map_value_to_key = sl~load_ref();
  (int value_key, int score_key) = ((value << 32) | score, (score << 128) | value);
  map_score_to_key~udict_set_ref(160, score_key, msg);
  map_value_to_key~udict_set_ref(160, value_key, msg);

  if (entries == 12) {
    (map_score_to_key, int highest_score, slice retval, _) = map_score_to_key.udict_delete_get_max(160);
    cell score_msg = retval~load_ref(); int score_value = highest_score & 0xffffffffffffffffffffffffffffffff; highest_score = highest_score >> 128;
    (map_value_to_key, int lowest_value, retval, _) = map_value_to_key.udict_delete_get_min(160);
    ;; send_cell(score_msg, score_value);
    cell address = begin_cell().store_uint(4, 3)
      .store_uint(0, 8)
      .store_uint(0, 256).end_cell();
    cell response_msg = begin_cell()
      .store_uint(0x18, 6)
      .store_slice(address.begin_parse())
      .store_grams(score_value)
      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 0)
      .store_uint(1, 1)
      .store_ref(score_msg)
      .end_cell();
    send_raw_message(response_msg, 0);
    entries -= 1;
    if (score_value != lowest_value >> 32) {
      cell value_msg = retval~load_ref(); int value_score = lowest_value & 0xffffffff; lowest_value = lowest_value >> 32;
      map_score_to_key~udict_delete?(160, (value_score << 128) | lowest_value);    ;; delete score crsp to value
      cell address = begin_cell().store_uint(4, 3)
        .store_uint(0, 8)
        .store_uint(0, 256).end_cell();
      cell response_msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(address.begin_parse())
        .store_grams(lowest_value)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 0)
        .store_uint(1, 1)
        .store_ref(value_msg)
        .end_cell();
      send_raw_message(response_msg, 0);
      ;; send_cell(value_msg, lowest_value);
      map_value_to_key~udict_delete?(160, (score_value << 32) | highest_score);   ;; delete highest_value_key crsp value
      entries -= 1;
    }
  }
  ;; serialize
  cell my_data = begin_cell()
    .store_uint(entries, 16)    ;; entries stored
    .store_ref(map_score_to_key)
    .store_ref(map_value_to_key)
    .end_cell();
  set_data(my_data);
}

;; () holla (int score, int value) impure {}

(int, int) fme (int a, int b) method_id {
  ;; holla(1, 5);
  ;; holla(2, 6);
  ;; holla(3, 100);
  ;; holla(4, 2);
  ;; holla(5, 3);
  ;; holla(6, 4);
  ;; holla(7, 7);
  ;; holla(8, 8);
  ;; holla(9, 9);
  ;; holla(10, 10);
  ;; holla(11, 11);
  ;; holla(12, 20);
  ;; holla(15, 1);
  ;; holla(13, 13);
  ;; holla(14, 14);
  return (3, 4);
}
